buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.48"
}

apply plugin: 'net.minecraftforge.gradle'

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
}

def versionInfo = getGitVersion()
version = "${versionInfo['inventorysorter.version']}"
group= "cpw.mods" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "inventorysorter"

minecraft {
    mappings channel: 'snapshot', version: '20180921-1.13'
    runConfig {
        name= "Minecraft Client"
        main= "net.minecraftforge.userdev.UserdevLauncher"
        ideaModuleName = "${project.name}_main"
        workingDirectory = project.file("run").canonicalPath
        environment "target", "fmluserdevclient"
        environment "assetDirectory", downloadAssets.output.absolutePath
        environment "FORGE_VERSION", "24.0.59-1.13-pre"
        environment "FORGE_GROUP", "net.minecraftforge.test"
        environment "MCP_VERSION", "20180921-1.13"
        environment "MC_VERSION", "1.13"
        environment "MOD_CLASSES", "${sourceSets.main.output.resourcesDir}${File.pathSeparator}${sourceSets.main.output.classesDirs.join(File.pathSeparator)}"
    }

    runConfig {
        name= "Minecraft Server"
        main= "net.minecraftforge.userdev.UserdevLauncher"
        ideaModuleName = "${project.name}_main"
        workingDirectory = project.file("run").canonicalPath
        environment "target", "fmldevserver"
        environment "assetDirectory", downloadAssets.output.absolutePath
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
//    runtimeOnly 'net.minecraftforge.test:forge:1.13-24.0.53-1.13-pre:launcher'
    minecraft 'net.minecraftforge.test:userdev:1.13-24.0.59-1.13-pre'
    compile 'net.minecraftforge.test:forge:1.13-24.0.59-1.13-pre:launcher'
}
/*
task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = file("CHANGELOG.html")
    untaggedName = "Current release ${project.version}"
    templateContent = """
<h1>Inventory sorter changelog history</h1>
<h2>Version ${project.version} for minecraft ${project.minecraft.version}</h2>
<ul>
{{#tags}}
<li><h3>{{name}}</h3>
<hr/>
<ul>
{{#commits}}
<li>{{{message}}}</li>
{{/commits}}
</ul>
{{/tags}}
</ul>
    """
}

curseforge {
    apiKey = project.hasProperty('curseforge_apikey') ? project.curseforge_apikey : '0'
    project {
        id = '240633'
        changelog = file('CHANGELOG.html')
        changelogType = 'html'
        releaseType = 'beta'
    }
}

afterEvaluate {
    tasks.curseforge240633.dependsOn.remove(reobfJar)
    tasks.curseforge240633.dependsOn.remove(jar)
    tasks.curseforge240633.dependsOn.add(makeChangelog)
}
*/

processResources
{
/*
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    doLast {
        def propsFile = new File(destinationDir, 'version.properties')
        def properties = new Properties()
        properties.putAll(versionInfo)
        properties['inventorysorter.build.mcversion'] = project.minecraft.version
        properties.store(propsFile.newWriter(), null)
    }
*/
}

jar {
    appendix = "1.13"
}

uploadArchives {
//    repositories.mavenDeployer {
//        dependsOn 'build'
//
//        if (project.hasProperty('forgeMavenPassword'))
//        {
//            repository(url: "http://files.minecraftforge.net/maven/manage/upload") {
//                authentication(userName: project.getProperty('forgeMavenUser'), password: project.getProperty('forgeMavenPassword')) // the elvis operator. look it up.
//            }
//        }
//        else
//        {
//            // local repo folder. Might wanna juset use  gradle install   if you wanans end it to maven-local
//            repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
//        }
//        // This is just the pom data for the maven repo
//        pom {
//            groupId = project.group
//            // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
//            version = "${project.minecraft.version}-${project.version}"
//            artifactId = project.archivesBaseName
//            //noinspection GroovyAssignabilityCheck
//            project {
//                name project.archivesBaseName
//                packaging 'jar'
//                description 'inventorysorter'
//                url 'https://github.com/cpw/inventorysorter'
//
//                scm {
//                    url 'https://github.com/cpw/inventorysorter'
//                    connection 'scm:git:git://github.com/cpw/inventorysorter.git'
//                    developerConnection 'scm:git:git@github.com:cpw/inventorysorter.git'
//                }
//
//                issueManagement {
//                    system 'github'
//                    url 'https://github.com/cpw/inventorysorter/issues'
//                }
//
//                licenses {
//                    license {
//                        name 'GNU Public License (GPL), Version 3.0'
//                        url 'http://www.gnu.org/licenses/gpl-3.0.txt'
//                        distribution 'repo'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id 'cpw'
//                        name 'cpw'
//                        roles { role 'developer' }
//                    }
//                }
//            }
//        }
//    }
}

// This is a special task for pulling the version information from git and the environment (for BUILD_NUMBER)
def getGitVersion()
{
    def out = [:]

    // call git command.
    def outStream = new ByteArrayOutputStream()
    def result = exec {
        executable = 'git'
        args = [ 'describe', '--long', "--match=[^(jenkins)]*"]
        standardOutput = outStream
    }

    def fullVersion = outStream.toString().trim()
    def matcher = fullVersion =~ /(\d+).(\d+)-(\d+)-(.*)/

    def maj = matcher[0][1]
    def min = matcher[0][2]
    def rev = matcher[0][3]
    def bn = project.ext.properties.buildNumber ?: System.getenv("PROMOTED_NUMBER") ?: System.getenv("BUILD_NUMBER") ?: "1"

    out['inventorysorter.build.major.number'] = maj.toString()
    out['inventorysorter.build.minor.number'] = min.toString()
    out['inventorysorter.build.revision.number'] = rev.toString()
    out['inventorysorter.build.githash'] = matcher[0][4].toString()
    out['inventorysorter.build.number' ] = bn.toString()
    out['inventorysorter.version' ] = "${maj}.${min}.${rev}+${bn}".toString()

    return out
}
